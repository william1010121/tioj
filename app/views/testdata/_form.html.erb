<%= form_for [@problem, @testdatum], :html => {multipart: true, id: 'testdata-form'}, remote: true, authenticity_token: true do |f| %>
  <%= render partial: "shared/errors", locals: {errors: @testdatum.errors, item: 'testdatum'} %>

  <div class="form-group">
    <%= f.label :test_input_list, "Input testdata" %>
    <% if @testdatum.test_input %>
      <br><%= @testdatum.test_input.to_s.split("/").last(3).join("/") %>
    <% end %>
    <%= f.file_field :test_input_list, :class => 'form-control flat', multiple: true , onchange: "updateInputFile(event)"%>
  </div>

  <div class="form-group">
    <%= f.label :test_output_list, "Output testdata" %>
    <% if @testdatum.test_output %>
      <br><%= @testdatum.test_output.to_s.split("/").last(3).join("/") %>
    <% end %>
    <%= f.file_field :test_output_list, :class => 'form-control flat', multiple: true, onchange: 'updateOutputFile(event)' %>
  </div>

  <div class="form-group">
    <div class="fold-header">
      Input/Output files info
      <%= button_tag '展開/收起',id: 'testdata-fold-button', class: 'btn btn-default btn-xs', type: "button"%>
    </div>
    <div class="testdata-table">
      <table id="folded-testdata-group"  class="table">
        <td>Input 0, output 0</td>
      </table>
      <table id="fold-table" style="display:none;" class="table">
        <td>none</td>
      </table>
    </div>
  </div>

  <div class="form-group">
    <%= f.label :time_limit, "Time Limit" %>
    <%= f.number_field :time_limit, :class => 'form-control flat' %>
  </div>
  <div class="form-group">
    <%= f.label :vss_limit, "Memory Limit (VSS)" %>
    <%= f.number_field :vss_limit, :class => 'form-control flat' %>
  </div>
  <div class="form-group">
    <%= f.label :rss_limit, "Memory Limit (RSS)" %>
    <%= f.number_field :rss_limit, :class => 'form-control flat' %>
  </div>
  <div class="form-group">
    <%= f.label :output_limit, "Output Limit" %>
    <%= f.number_field :output_limit, :class => 'form-control flat' %>
  </div>

  <div class="dummy-placeholder">
    <%= f.hidden_field :problem_id %>
  </div>

  <div class="form-group flex" style="display: flex; margin-bottom: 0.5em;">
    <div class="actions" style="margin-right: 1em; flex: 0 0 0%;">
      <%= f.submit :class => 'btn btn-success btn-lg' %>
    </div>
    <div class="fade" id="progress-fade" style="flex: 1 0 0%;">
      <div class="progress progress-striped active" role="progressbar" style="margin-bottom: 0.25em; border-radius: 4px; height: 20px; background: #f0faf0;">
        <div id="progress-inner-bar" class="progress-bar progress-bar-success" style="width: 0%;"></div>
      </div>
      <div id="progress-text" class="progress-extended small"></div>
    </div>
  </div>

<% end %>

<script>
$("#testdata-fold-button") .click( () => {
  $("#fold-table") .toggle();
})
var InputFileList = [];
var OutputFileList = [];


function refreshFileListTable() {
  //console.log( 'refresh');
  document.getElementById('folded-testdata-group').innerHTML =
        "<td>" + 'Input ' + InputFileList.length + ', output ' + OutputFileList.length + "</td>";

  let tmpTable = document.getElementById('fold-table');
  tmpTable.innerHTML = '';
  for( let idx = 0; idx < Math.max( InputFileList.length, OutputFileList.length ); idx++ ){
    let tmpRow = tmpTable.insertRow();
    let tmpCell = tmpRow.insertCell();
    tmpCell.innerHTML = InputFileList[idx] ? InputFileList[idx].name : ' ';
    tmpCell = tmpRow.insertCell();
    tmpCell.innerHTML = OutputFileList[idx] ? OutputFileList[idx].name : ' ';
    //console.log( OutputFileList[idx] ? OutputFileList[idx].name : ' ' );
  }
}

function updateOutputFile(event) {
  //console.log( "update Output");
  OutputFileList = Array.from( event['target']['files'] ) .sort() .filter( (file) => {
    return file.name.endsWith('.out');
  })
  //console.log( OutputFileList[0] );
  refreshFileListTable();
}

function updateInputFile(event) {
  //console.log( "update Input");
  InputFileList = Array.from( event['target']['files'] ) .sort() .filter( (file) => {
    return file.name.endsWith('.in');
  });
  refreshFileListTable();
}
</script>
<script>
$(function () { $('#testdata-form').submit(function (event) {
    event.preventDefault();
    var _formatFileSize = function (bytes) {
      if (typeof bytes !== 'number') {
        return '';
      }
      if (bytes >= (1024*1024*1024)) {
        return (bytes / (1024*1024*1024)).toFixed(2) + ' GiB';
      }
      if (bytes >= (1024*1024)) {
        return (bytes / (1024*1024)).toFixed(2) + ' MiB';
      }
      if (bytes >= 1024) {
        return (bytes / 1024).toFixed(2) + ' KiB';
      }
      return (bytes * 1.0).toFixed(2) + ' byte';
    };
    var _formatTime = function (seconds) {
      var date = new Date(seconds * 1000), days = Math.floor(seconds / 86400);
      days = days ? days + 'd ' : '';
      if (date.getUTCHours() > 1) {
        days = days + ('0' + date.getUTCHours()).slice(-2) + ':';
      }
      return (
        days +
        ('0' + date.getUTCMinutes()).slice(-2) +
        ':' +
        ('0' + date.getUTCSeconds()).slice(-2)
      );
    };
    var _formatPercentage = function (floatValue) {
      return (floatValue * 100).toFixed(2) + ' %';
    };
    var _renderProgress = function (data) {
      return (
        _formatPercentage(data.loaded / data.total) +
        ' | ' +
        _formatFileSize(data.loaded) +
        ' / ' +
        _formatFileSize(data.total) +
        ' | ETA ' +
        _formatTime((data.total - data.loaded) / (data.byterate)) +
        ' | ' +
        _formatFileSize(data.byterate) +
        '/s'
      );
    };

    //console.log( this.elements['testdatum_test_input_list']['files'])
    var FileInput  = Array.from( this.elements['testdatum_test_input_list']['files'] ) .sort() .filter( (file) => {
      return file.name.endsWith('.in');
    });
    var FileOutput = Array.from( this.elements['testdatum_test_output_list']['files'] ) .sort() .filter( (file) => {
      return file.name.endsWith('.out');
    });
    if( FileInput.length != FileOutput.length ){
      alert('Number of input files and output files are not equal.');
      //refresh the page
      location.reload();
      return;
    }
    if( FileInput.length == 0 ){
      alert('No input files.');
      //refresh the page
      location.reload();
      return;
    }

    for( let idx = 0; idx < FileInput.length; idx++ ){
      if( FileInput[idx].name.replace('.in', '') != FileOutput[idx].name.replace('.out', '') ){
        alert('Input file name and output file name are not equal.');
        //refresh the page
        location.reload();
        return;
      }
    }

    var tmpData = new FormData(this);
    var formData = new FormData();


    for( let [key, value] of tmpData.entries() ){
      if( key == 'testdatum[test_input_list][]' || key == 'testdatum[test_output_list][]' ){
        continue;
      }
      formData.append(key, value);
    }
    FileInput.forEach( (file) => {
      formData.append('testdatum[test_input_list][]', file);
    });
    FileOutput.forEach( (file) => {
      formData.append('testdatum[test_output_list][]', file);
    });



    var lastUpdate = (new Date().getTime()) - 500;
    var byterate = 0.0;
    var prevLoaded = 0;
    $.ajax({
      type: 'POST',
      url: $(this).attr('action'),
      data: formData,
      processData: false,
      contentType: false,
      xhr: function() {
        var xhr = new window.XMLHttpRequest();
        xhr.upload.onprogress = function(evt) {
          if (evt.lengthComputable) {
            var now = new Date().getTime();
            $('#progress-fade').addClass('in');
            if (evt.loaded == evt.total) {
              $('#progress-inner-bar').width('100%');
              $('#progress-text').text('Processing...');
            } else if (now - lastUpdate >= 500) {
              var curByterate = ((evt.loaded - prevLoaded) / (now - lastUpdate)) * 1000;
              byterate = byterate * 0.7 + curByterate * 0.3;
              evt.byterate = curByterate;
              lastUpdate = now;
              prevLoaded = evt.loaded;
              $('#progress-text').text(_renderProgress(evt));
              $('#progress-inner-bar').width((evt.loaded / evt.total * 100) + '%');
            }
          }
        };
        return xhr;
      },
      success: function (data) {
        document.open();
        document.write(data);
        document.close();
      },
      error: function (xhr, status, error) {
        $('#progress-fade').removeClass('in');
        $('#progress-inner-bar').width('0%');
      },
      abort: function() {
        $('#progress-fade').removeClass('in');
        $('#progress-inner-bar').width('0%');
      },
    });
  });
});
</script>

<style>
.testdata-table {
  margin-top: 1em;
  margin-bottom: 1em;
  background: #fff;
}
</style>